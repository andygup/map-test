import{b1 as L,bY as E,b9 as F,d5 as V,d6 as g,ak as D,d7 as I,d8 as O,d9 as W,cC as k,da as Y,db as H,X as l,Y as d,dc as K,dd as z,a3 as T}from"./index-C-FXvluM.js";import{o as U,t as _}from"./gridUtils-DnVGRhB5.js";let s=class extends L{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){var t;return E(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var e;const{spatialReference:t,grid:i}=this;if(!i||!t)return null;try{const r=F(i.center,t),n=t.isWrappable&&((e=this.view)==null?void 0:e.center)!=null?V(r.x,this.view.center.x,t):r.x;return g(n,r.y,r.z)}catch(r){return D.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:e,dynamicScaling:r}=i;return e<1?null:U(e,t,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?I(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){return O(this.view.scale)}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return!1}async fetchCandidates(t,i,e){var p;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(p=e.feature)!=null&&p.attributes&&W in e.feature.attributes)return[];const o=e.coordinateHelper.arrayToPoint(t),a=r.distance*(e.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(o,a)}fetchCandidatesSync(t,i){const e=[],{grid:r,effectiveViewRotation:n,gridRotation:o,gridCenter:a,viewMetersPerPixel:p,offsetScaleFactor:S,spatialReference:h,gridMetersPerStride:y,pixelsPerStride:m}=this;if(!(r&&p&&a&&h&&S&&y&&m)||!r.dynamicScaling&&m<_)return e;const P=F(t,h),X=g(P.x,P.y,P.z),c=f(X,-o,a,-n),$=k(h),M=y/$*S,u=q(c,M,a),{shouldSnapX:v,shouldSnapY:w}=A(u,c,i,p,$);if(!v&&!w)return[];const j=g((v?u:c)[0],(w?u:c)[1]),x=f(j,o,a,n),C=f(u,o,a,n);if(w){const b=G(u,c,M,"y"),R=f(b,o,a,n);e.push(new Y({lineStart:C,lineEnd:R,targetPoint:x,isDraped:!1}))}if(v){const b=G(u,c,M,"x"),R=f(b,o,a,n);e.push(new Y({lineStart:C,lineEnd:R,targetPoint:x,isDraped:!1}))}return v&&w&&e.push(new H(x,e[0],e[1],!1)),e}};l([d({constructOnly:!0})],s.prototype,"view",void 0),l([d()],s.prototype,"options",void 0),l([d()],s.prototype,"grid",null),l([d()],s.prototype,"effectiveViewRotation",null),l([d()],s.prototype,"gridRotation",null),l([d()],s.prototype,"gridCenter",null),l([d()],s.prototype,"offsetScaleFactor",null),l([d()],s.prototype,"spatialReference",null),l([d()],s.prototype,"gridMetersPerStride",null),l([d()],s.prototype,"viewMetersPerPixel",null),l([d()],s.prototype,"pixelsPerStride",null),l([d()],s.prototype,"updating",null),s=l([T("esri.views.interactive.snapping.GridSnappingEngine")],s);const f=(t,i,e,r)=>{const n=K(t[0],t[1],t[2]);return z(n,z(n,n,e,i),e,r)},q=(t,i,e)=>{const r=(t[0]-e[0])/i,n=(t[1]-e[1])/i,o=Math.trunc(r),a=Math.trunc(n),p=Math.round(r%1),S=Math.round(n%1),h=e[0]+(o+p)*i,y=e[1]+(a+S)*i;return g(h,y)},A=(t,i,e,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const o=(t[0]-i[0])/r,a=(t[1]-i[1])/r;return{shouldSnapX:Math.abs(o*n)<e,shouldSnapY:Math.abs(a*n)<e}},G=(t,i,e,r)=>{if(r==="y"){const o=i[0]>t[0]?1:-1;return g(t[0]+e*o,t[1])}const n=i[1]>t[1]?1:-1;return g(t[0],t[1]+e*n)};export{s as GridSnappingEngine};

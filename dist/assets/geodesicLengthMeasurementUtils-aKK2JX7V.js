import{hA as i,aN as o,n as l,bx as c,hB as a,hC as m,hD as h,hE as y}from"./index-C-FXvluM.js";import{geodesicLength as f}from"./geometryEngine-TWT-eAO7.js";function Z(n){return i(n)||o(n)}function p(n,e,r,...u){return i(n)?e.apply(void 0,u):o(n)?r.apply(void 0,u):null}function j(n){const{spatialReference:e}=n;return p(e,g,$,n)}function q(n,e){if(!l(n.spatialReference,e.spatialReference))return null;const{spatialReference:r}=n;return t[0]=n.x,t[1]=n.y,t[2]=n.hasZ?n.z:0,s[0]=e.x,s[1]=e.y,s[2]=e.hasZ?e.z:0,R(t,s,r)}function R(n,e,r){return p(r,d,x,n,e,r)}function d(n,e,r){return a(m(v,n,e,r).distance,"meters")}function x(n,e,r){return a(f(b(n,e,r),"meters"),"meters")}function g(n){return a(h([n],"meters")[0],"meters")}function $(n){return a(f(n,"meters"),"meters")}function b(n,e,r){return{type:"polyline",spatialReference:r,paths:[[[...n],[...e]]]}}const v=new y,t=c(),s=c();export{Z as e,q as f,j as m,p as r,R as u};

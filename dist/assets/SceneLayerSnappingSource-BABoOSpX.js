import{dI as _,ai as C,X as s,Y as a,a3 as w,b1 as f,lS as H,g8 as v,ga as E,lT as x,bx as k,cn as I,ih as $,hm as O,g5 as S,kb as V,M as A,bk as R}from"./index-CC72Q5ax.js";import{h as L}from"./WorkerHandle-ClmRYTn9.js";import{t as p}from"./workerHelper-DglN0zE-.js";import{f as D}from"./edgeProcessing-Z2RHopTf.js";import{r as P}from"./VertexSnappingCandidate-Cf6XYral.js";import"./InterleavedLayout-CjFMHkew.js";import"./BufferView-IdfsJNbH.js";import"./types-D0PSWh4d.js";import"./Util-BiGuS9PU.js";import"./deduplicate-C0MyxjfC.js";import"./Indices-DWw6RaGO.js";import"./glUtil-DtV4jYvF.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./Normals-5DV3Pz1I.js";import"./PointSnappingHint-A6rcas4e.js";class j extends L{constructor(t){super("EdgeProcessingWorker","extract",{extract:r=>[r.dataBuffer],extractComponentsEdgeLocations:r=>[r.dataBuffer],extractEdgeLocations:r=>[r.dataBuffer]},t)}async process(t,r,i){return i?D(t):B(await this.invoke(new y(t),r))}async extractEdgeLocations(t,r){const i=await this.invokeMethod("extractEdgeLocations",new y(t),r);return p(i)}async extractComponentsEdgeLocations(t,r){const i=await this.invokeMethod("extractComponentsEdgeLocations",new y(t),r);return p(i)}}function B(e){return{regular:{instancesData:p(e.regular.instancesData),lodInfo:{lengths:new Float32Array(e.regular.lodInfo.lengths)}},silhouette:{instancesData:p(e.silhouette.instancesData),lodInfo:{lengths:new Float32Array(e.silhouette.lodInfo.lengths)}},averageEdgeLength:e.averageEdgeLength}}class y{constructor(t){this.dataBuffer=t.data.buffer,this.writerSettings=t.writerSettings,this.skipDeduplicate=t.skipDeduplicate,this.indices=_(t.indices)?t.indices:t.indices.buffer,this.indicesType=_(t.indices)?"Array":C(t.indices)?"Uint32Array":"Uint16Array",this.indicesLength=t.indicesLength}}let d=class extends f{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new M(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:i}=e,n=W;this.renderCoordsHelper.toRenderCoords(i,r.spatialReference,n);const h=e.distance,c=typeof h=="number"?h:h.distance,u=await this._workerHandle.invoke({bounds:H(n[0],n[1],n[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return u.candidates.sort((g,b)=>g.distance-b.distance),u.candidates.map(g=>this._convertCandidate(r,g))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new E({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new P({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=k();return this.renderCoordsHelper.fromRenderCoords(t,r,e),x(r)}async _fetchAllEdgeLocations(e,t){const r=[],i=[];for(const{id:n,uid:h}of e.components)this._ids.has(n)&&r.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),u=c.locations.buffer;return i.push(u),{id:n,uid:h,objectIds:c.objectIds,locations:u,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:n})=>this._ids.has(n))},transferList:i}}};s([a({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),s([a({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),s([a({constructOnly:!0})],d.prototype,"schedule",void 0),s([a({readOnly:!0})],d.prototype,"availability",void 0),d=s([w("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let M=class extends L{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const W=k();let o=class extends f{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new I,this._abortController=new AbortController}destroy(){this._tracker=$(this._tracker),this._abortController=O(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new j(m(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:m(t),fetchEdgeLocations:async(r,i)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,i)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([S(this._workerHandle),S(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var r;if(this.destroyed)return;const e=(r=this._abortController)==null?void 0:r.signal,t=await this.getLayerView();t==null||V(e)||(this._tracker=t.trackSnappingSources({add:(i,n)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:i,bounds:n},e))},remove:i=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:i},e))}}))}};function m(e){return t=>e.immediate.schedule(t)}s([a({constructOnly:!0})],o.prototype,"getLayerView",void 0),s([a({constructOnly:!0})],o.prototype,"view",void 0),s([a({readOnly:!0})],o.prototype,"updating",null),s([a({readOnly:!0})],o.prototype,"availability",void 0),o=s([w("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],o);let l=class extends f{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(i=>i.fetchCandidates(e,t)));return A(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new o({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(R)}_getSceneLayerI3SSource(e,t){return new o({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};s([a({constructOnly:!0})],l.prototype,"layerSource",void 0),s([a({constructOnly:!0})],l.prototype,"view",void 0),s([a({readOnly:!0})],l.prototype,"updating",null),s([a({readOnly:!0})],l.prototype,"availability",void 0),l=s([w("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
